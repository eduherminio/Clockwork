#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(283, 389);
inline const PParam KNIGHT_MAT = S(1077, 969);
inline const PParam BISHOP_MAT = S(1093, 1040);
inline const PParam ROOK_MAT   = S(1588, 1715);
inline const PParam QUEEN_MAT  = S(3590, 3036);
inline const PParam TEMPO_VAL  = S(57, 17);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam DOUBLED_PAWN_VAL = S(-35, -77);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(15, 20), S(54, 33), S(77, 69), S(196, 137), S(503, 276), S(963, 1172),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(58, 46), S(57, 28), S(62, 55), S(143, 118), S(647, -84),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-56, 17), S(-42, 32), S(-14, 103), S(51, 180), S(91, 309), S(247, 114),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(46, -43), S(28, -1), S(12, 27), S(19, 70), S(84, 151), S(166, 273),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(15, -41), S(-1, 5), S(-21, -18), S(-21, -43), S(-41, -85), S(-218, -139),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(18, 36), S(-22, 39), S(-13, -12), S(-1, -41), S(4, -35), S(32, -41), S(14, -54),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-182, -106), S(19, -64), S(-20, -21), S(-1, 9), S(3, 35), S(28, 32), S(-22, 54),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-225, -287), S(-119, -122), S(-61, -72), S(-17, -37), S(31, -23), S(59, 18), S(96, 14), S(131, 8), S(184, -62),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-137, -375), S(-64, -181), S(18, -113), S(49, -69), S(78, -35), S(97, -17), S(113, -8), S(128, -4), S(138, 2), S(145, -9), S(166, -27), S(221, -79), S(248, -96), S(305, -138),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-210, -393), S(-115, -148), S(-59, -74), S(-23, -58), S(5, -30), S(27, -12), S(49, -4), S(78, -3), S(104, 4), S(131, 14), S(160, 13), S(176, 17), S(213, 10), S(232, -5), S(371, -130),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-424, 68), S(-269, -772), S(-175, -639), S(-129, -423), S(-102, -247), S(-69, -155), S(-70, -19), S(-43, -24), S(-34, 18), S(-23, 38), S(-14, 62), S(-9, 80), S(5, 80), S(17, 81), S(22, 86), S(40, 71), S(32, 84), S(46, 64), S(67, 32), S(98, -12), S(120, -43), S(154, -111), S(206, -145), S(362, -312), S(344, -325), S(742, -550), S(563, -498), S(1181, -821),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(488, 559), S(172, 400), S(73, 483), S(60, 518), S(37, 512), S(0, 512), S(23, 507), S(15, 488), S(17, 419),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -31), S(151, -76),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(35, -3), S(141, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -44), S(67, -68), S(109, -70), S(142, -132),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-40, 32), S(-59, 43), S(-4, -6), S(149, -91), S(343, -232),
};

inline const PParam PAWN_THREAT_KNIGHT = S(224, 74);
inline const PParam PAWN_THREAT_BISHOP = S(200, 106);
inline const PParam PAWN_THREAT_ROOK   = S(189, 56);
inline const PParam PAWN_THREAT_QUEEN  = S(159, -50);

inline const PParam KNIGHT_THREAT_BISHOP = S(99, 71);
inline const PParam KNIGHT_THREAT_ROOK   = S(238, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(150, -72);

inline const PParam BISHOP_THREAT_KNIGHT = S(106, 24);
inline const PParam BISHOP_THREAT_ROOK   = S(234, 52);
inline const PParam BISHOP_THREAT_QUEEN  = S(186, 49);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-8, -7), S(-10, 0), S(-9, -9), S(-14, -19), S(-20, -24), S(-25, -28), S(-25, -34), S(-30, -34), S(-38, -45),
};

inline const std::array<PParam, 9> BISHOP_PAWNS_CENTRAL_BLOCKED = {
    S(-14, -2), S(-12, -1), S(-8, -12), S(-9, -16), S(2, -8), S(-26, 99), S(-27, -95), S(-27, -39), S(-37, -48),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(182, 394),    S(200, 440),    S(242, 412),    S(304, 286),    S(226, 299),    S(226, 362),    S(138, 376),    S(179, 347),    //
    S(55, -14),     S(185, 12),     S(160, -47),    S(163, -104),   S(117, -118),   S(65, -75),     S(26, -27),     S(-36, -27),    //
    S(-3, -55),     S(24, -51),     S(41, -94),     S(24, -108),    S(11, -114),    S(-27, -110),   S(-72, -60),    S(-103, -40),   //
    S(-12, -110),   S(8, -80),      S(8, -116),     S(-2, -114),    S(-23, -124),   S(-52, -109),   S(-110, -58),   S(-131, -73),   //
    S(-28, -140),   S(38, -136),    S(-4, -95),     S(-36, -88),    S(-52, -99),    S(-94, -101),   S(-114, -86),   S(-146, -91),   //
    S(-20, -136),   S(112, -130),   S(74, -99),     S(14, -80),     S(-22, -93),    S(-55, -95),    S(-87, -68),    S(-123, -83),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-373, -90),   S(-314, 59),    S(-385, 235),   S(-117, 97),    S(-266, 120),   S(-347, 143),   S(-535, 83),    S(-504, 30),    //
    S(14, 18),      S(95, 29),      S(193, -41),    S(133, 32),     S(140, 32),     S(69, 8),       S(18, 24),      S(-7, -18),     //
    S(79, -2),      S(126, 50),     S(209, 44),     S(165, 60),     S(174, 47),     S(81, 58),      S(84, 28),      S(-14, 34),     //
    S(121, 31),     S(104, 64),     S(131, 75),     S(122, 98),     S(128, 83),     S(88, 86),      S(55, 35),      S(50, 29),      //
    S(118, 16),     S(134, 19),     S(123, 51),     S(107, 57),     S(98, 69),      S(89, 66),      S(63, 32),      S(56, -33),     //
    S(31, -6),      S(46, -17),     S(52, -4),      S(58, 45),      S(66, 41),      S(8, 18),       S(14, -23),     S(-23, -24),    //
    S(25, 13),      S(58, -12),     S(37, -13),     S(36, 3),       S(22, -3),      S(-4, -21),     S(16, -31),     S(-51, -104),   //
    S(-15, -44),    S(28, -15),     S(45, -29),     S(54, -18),     S(50, -10),     S(3, -43),      S(-16, -27),    S(-68, -65),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-145, 95),    S(-160, 60),    S(-388, 85),    S(-302, 118),   S(-236, 117),   S(-417, 141),   S(-125, 110),   S(-90, 93),     //
    S(35, -15),     S(28, 55),      S(29, 49),      S(28, 37),      S(11, 49),      S(26, 50),      S(0, 47),       S(-33, 36),     //
    S(54, 45),      S(119, 47),     S(220, 45),     S(138, 45),     S(121, 46),     S(89, 63),      S(140, 35),     S(18, 47),      //
    S(67, -2),      S(73, 60),      S(131, 52),     S(140, 78),     S(145, 78),     S(80, 73),      S(50, 57),      S(0, 40),       //
    S(66, -22),     S(90, 17),      S(98, 46),      S(105, 65),     S(94, 87),      S(51, 73),      S(35, 30),      S(20, -27),     //
    S(83, -32),     S(129, -1),     S(139, 6),      S(72, 50),      S(56, 58),      S(51, 58),      S(84, 10),      S(51, -31),     //
    S(70, -68),     S(118, -40),    S(97, -30),     S(68, 2),       S(58, -15),     S(56, -20),     S(32, -11),     S(56, -76),     //
    S(69, -46),     S(63, -3),      S(69, -4),      S(84, -33),     S(92, -41),     S(83, -8),      S(73, -27),     S(49, -29),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(153, 47),     S(216, 45),     S(131, 79),     S(140, 73),     S(161, 54),     S(106, 68),     S(120, 73),     S(130, 75),     //
    S(82, 95),      S(167, 72),     S(231, 52),     S(174, 87),     S(182, 79),     S(131, 88),     S(83, 102),     S(61, 114),     //
    S(64, 73),      S(205, 41),     S(244, 24),     S(263, 17),     S(220, 26),     S(136, 68),     S(153, 57),     S(32, 110),     //
    S(18, 66),      S(89, 57),      S(124, 51),     S(168, 8),      S(134, 33),     S(64, 85),      S(44, 82),      S(-28, 92),     //
    S(-52, 26),     S(28, 30),      S(24, 42),      S(23, 38),      S(19, 32),      S(-10, 79),     S(-39, 77),     S(-60, 64),     //
    S(-82, 5),      S(-8, -21),     S(-6, 1),       S(-25, 9),      S(-3, -12),     S(-53, 37),     S(-60, 24),     S(-81, 19),     //
    S(-126, 10),    S(-37, -39),    S(-11, -28),    S(0, -28),      S(-7, -24),     S(-26, -9),     S(-47, -29),    S(-85, -14),    //
    S(-104, 12),    S(-66, 18),     S(-19, -13),    S(12, -31),     S(4, -18),      S(-8, -11),     S(-30, -16),    S(-61, 0),      //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(48, 75),      S(68, 49),      S(68, 61),      S(-58, 202),    S(34, 95),      S(-42, 141),    S(42, 38),      S(-7, 61),      //
    S(33, 115),     S(-44, 211),    S(-47, 264),    S(-124, 293),   S(-100, 237),   S(-126, 250),   S(-58, 139),    S(-25, 76),     //
    S(-12, 148),    S(70, 156),     S(20, 220),     S(4, 224),      S(-34, 208),    S(-77, 216),    S(6, 103),      S(-31, 72),     //
    S(40, 73),      S(29, 160),     S(0, 183),      S(4, 232),      S(-22, 218),    S(-24, 150),    S(-4, 76),      S(-5, 27),      //
    S(9, 106),      S(46, 61),      S(22, 125),     S(-7, 171),     S(-26, 164),    S(-20, 118),    S(-16, 53),     S(-12, 3),      //
    S(26, -80),     S(43, -19),     S(45, 46),      S(-9, 79),      S(8, 26),       S(10, 31),      S(14, -30),     S(-7, -14),     //
    S(12, -184),    S(45, -288),    S(30, -139),    S(46, -65),     S(17, -45),     S(37, -124),    S(14, -58),     S(3, -63),      //
    S(-38, -101),   S(29, -357),    S(27, -350),    S(59, -263),    S(55, -179),    S(62, -220),    S(41, -173),    S(-14, -91),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-113, -405),  S(151, -47),    S(-39, 21),     S(-125, 51),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(245, -128),   S(28, 141),     S(46, 139),     S(182, 83),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-18, 52),     S(99, 139),     S(116, 119),    S(122, 74),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-247, 82),    S(57, 103),     S(55, 104),     S(-6, 86),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-204, 34),    S(-22, 76),     S(3, 77),       S(-80, 117),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-122, 6),     S(72, 20),      S(-14, 71),     S(-58, 98),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(102, -84),    S(152, -20),    S(64, 24),      S(-10, 68),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-22, -121),   S(115, -105),   S(26, -71),     S(4, -64),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// Epoch duration: 38.9337s
// Loss: 0.00246796
// clang-format on
}
