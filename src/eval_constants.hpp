#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(290, 383);
inline const PParam KNIGHT_MAT = S(1096, 962);
inline const PParam BISHOP_MAT = S(1096, 1027);
inline const PParam ROOK_MAT   = S(1621, 1703);
inline const PParam QUEEN_MAT  = S(3653, 3020);
inline const PParam TEMPO_VAL  = S(58, 15);

inline const PParam BISHOP_PAIR_VAL  = S(81, 177);
inline const PParam DOUBLED_PAWN_VAL = S(-36, -76);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(17, 19), S(58, 31), S(78, 70), S(202, 137), S(561, 251), S(940, 1161),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(62, 45), S(57, 31), S(63, 57), S(145, 121), S(696, -83),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-53, 14), S(-43, 31), S(-12, 102), S(54, 180), S(92, 315), S(258, 112),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(43, -41), S(29, -2), S(14, 27), S(21, 72), S(96, 143), S(174, 276),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(15, -42), S(-1, 6), S(-22, -17), S(-22, -41), S(-37, -87), S(-234, -139),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(21, 38), S(-22, 43), S(-14, -10), S(-1, -40), S(8, -37), S(37, -39), S(16, -52),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-193, -110), S(15, -62), S(-24, -21), S(-2, 10), S(3, 34), S(25, 33), S(-23, 51),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-219, -291), S(-110, -129), S(-51, -72), S(-5, -38), S(42, -23), S(70, 18), S(109, 12), S(144, 7), S(197, -65),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-132, -370), S(-58, -177), S(21, -119), S(50, -74), S(79, -42), S(98, -23), S(113, -15), S(130, -11), S(141, -6), S(147, -19), S(170, -37), S(223, -89), S(237, -98), S(300, -145),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-209, -381), S(-108, -127), S(-55, -65), S(-18, -55), S(12, -30), S(32, -11), S(54, -2), S(84, -3), S(111, 3), S(140, 12), S(168, 11), S(185, 15), S(221, 9), S(242, -8), S(387, -137),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-438, 69), S(-268, -771), S(-172, -632), S(-122, -419), S(-97, -233), S(-64, -152), S(-63, -27), S(-38, -21), S(-28, 15), S(-18, 35), S(-11, 62), S(-5, 81), S(9, 78), S(19, 83), S(24, 85), S(41, 73), S(40, 79), S(52, 60), S(73, 27), S(100, -9), S(127, -46), S(164, -111), S(211, -148), S(339, -292), S(345, -316), S(710, -534), S(573, -490), S(1180, -814),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(505, 544), S(175, 392), S(73, 478), S(58, 513), S(35, 506), S(0, 507), S(21, 502), S(14, 483), S(14, 418),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -30), S(152, -76),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(35, -3), S(140, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -43), S(70, -70), S(112, -70), S(160, -134),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-41, 32), S(-59, 43), S(-5, -3), S(157, -93), S(357, -241),
};

inline const PParam PAWN_THREAT_KNIGHT = S(232, 70);
inline const PParam PAWN_THREAT_BISHOP = S(211, 115);
inline const PParam PAWN_THREAT_ROOK   = S(194, 55);
inline const PParam PAWN_THREAT_QUEEN  = S(172, -62);

inline const PParam KNIGHT_THREAT_BISHOP = S(102, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(244, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(151, -66);

inline const PParam BISHOP_THREAT_KNIGHT = S(105, 25);
inline const PParam BISHOP_THREAT_ROOK   = S(241, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 43);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(25, -20), S(6, 6), S(3, -8), S(-8, -26), S(-22, -33), S(-33, -44), S(-36, -66), S(-53, -76), S(-82, -133),
};

inline const std::array<PParam, 9> BISHOP_PAWNS_CENTRAL_BLOCKED = {
    S(10, 9), S(-4, 0), S(-17, -26), S(-38, -50), S(-43, -67), S(-77, 3), S(-51, -174), S(-26, -38), S(-36, -47),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(183, 394),    S(188, 444),    S(252, 411),    S(301, 297),    S(247, 290),    S(236, 355),    S(133, 377),    S(187, 350),    //
    S(69, -23),     S(194, 3),      S(167, -52),    S(165, -107),   S(120, -126),   S(64, -76),     S(27, -30),     S(-34, -26),    //
    S(0, -57),      S(26, -51),     S(43, -95),     S(28, -109),    S(14, -115),    S(-27, -107),   S(-70, -59),    S(-104, -37),   //
    S(-9, -111),    S(14, -82),     S(12, -115),    S(3, -114),     S(-19, -123),   S(-50, -109),   S(-106, -59),   S(-130, -73),   //
    S(-26, -138),   S(42, -135),    S(-4, -92),     S(-35, -88),    S(-52, -97),    S(-93, -98),    S(-114, -82),   S(-146, -89),   //
    S(-15, -135),   S(116, -131),   S(72, -96),     S(15, -76),     S(-20, -89),    S(-56, -91),    S(-84, -65),    S(-123, -80),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-363, -143),  S(-318, 72),    S(-429, 247),   S(-93, 78),     S(-231, 107),   S(-314, 112),   S(-542, 102),   S(-510, 0),     //
    S(25, 15),      S(95, 23),      S(195, -46),    S(144, 17),     S(144, 23),     S(79, 1),       S(20, 26),      S(0, -18),      //
    S(87, -5),      S(133, 43),     S(220, 36),     S(176, 56),     S(175, 46),     S(91, 55),      S(86, 24),      S(-9, 29),      //
    S(128, 33),     S(101, 65),     S(137, 72),     S(121, 97),     S(131, 83),     S(96, 77),      S(65, 30),      S(56, 29),      //
    S(121, 18),     S(141, 14),     S(130, 45),     S(112, 56),     S(102, 67),     S(92, 63),      S(70, 28),      S(63, -27),     //
    S(30, -5),      S(53, -19),     S(54, -3),      S(64, 42),      S(72, 39),      S(15, 15),      S(17, -21),     S(-14, -26),    //
    S(35, 9),       S(60, -16),     S(39, -14),     S(41, 3),       S(27, -2),      S(0, -24),      S(19, -36),     S(-40, -108),   //
    S(-9, -42),     S(33, -3),      S(48, -29),     S(61, -23),     S(54, -16),     S(8, -48),      S(-5, -18),     S(-64, -66),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-139, 83),    S(-163, 68),    S(-405, 92),    S(-285, 106),   S(-234, 110),   S(-403, 136),   S(-149, 114),   S(-95, 86),     //
    S(30, -25),     S(21, 55),      S(36, 37),      S(21, 37),      S(-2, 53),      S(34, 44),      S(10, 37),      S(-33, 34),     //
    S(63, 32),      S(123, 39),     S(214, 47),     S(141, 43),     S(121, 44),     S(90, 60),      S(142, 30),     S(23, 37),      //
    S(64, -3),      S(73, 55),      S(130, 51),     S(139, 77),     S(148, 76),     S(80, 72),      S(49, 55),      S(2, 33),       //
    S(70, -33),     S(90, 15),      S(99, 40),      S(107, 64),     S(101, 81),     S(48, 72),      S(36, 28),      S(22, -31),     //
    S(87, -33),     S(129, -7),     S(136, 7),      S(79, 48),      S(61, 52),      S(59, 49),      S(87, 4),       S(53, -30),     //
    S(71, -72),     S(122, -43),    S(95, -30),     S(68, 0),       S(58, -14),     S(60, -27),     S(41, -15),     S(59, -82),     //
    S(68, -55),     S(60, -10),     S(66, -1),      S(82, -37),     S(91, -48),     S(87, -8),      S(73, -35),     S(47, -33),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(164, 41),     S(216, 43),     S(143, 74),     S(155, 66),     S(163, 55),     S(116, 67),     S(129, 68),     S(141, 71),     //
    S(85, 93),      S(164, 70),     S(240, 47),     S(178, 86),     S(194, 74),     S(142, 83),     S(83, 101),     S(71, 109),     //
    S(75, 70),      S(218, 30),     S(254, 22),     S(271, 12),     S(225, 22),     S(145, 65),     S(162, 52),     S(38, 106),     //
    S(25, 66),      S(91, 59),      S(129, 51),     S(171, 6),      S(139, 31),     S(75, 79),      S(49, 82),      S(-18, 91),     //
    S(-43, 24),     S(38, 26),      S(29, 40),      S(30, 38),      S(25, 33),      S(0, 76),       S(-31, 73),     S(-55, 64),     //
    S(-77, 6),      S(-3, -22),     S(-3, 5),       S(-15, 5),      S(2, -13),      S(-47, 38),     S(-53, 23),     S(-79, 22),     //
    S(-134, 15),    S(-33, -43),    S(-11, -27),    S(3, -29),      S(-1, -26),     S(-20, -11),    S(-44, -31),    S(-84, -10),    //
    S(-103, 14),    S(-69, 22),     S(-18, -14),    S(18, -32),     S(9, -19),      S(-4, -9),      S(-25, -15),    S(-55, 2),      //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(42, 77),      S(78, 43),      S(78, 54),      S(-44, 186),    S(30, 101),     S(-27, 130),    S(44, 40),      S(-13, 59),     //
    S(30, 118),     S(-42, 211),    S(-44, 261),    S(-132, 294),   S(-103, 240),   S(-113, 238),   S(-66, 146),    S(-30, 87),     //
    S(-9, 146),     S(80, 143),     S(18, 220),     S(1, 229),      S(-36, 209),    S(-71, 211),    S(1, 105),      S(-33, 80),     //
    S(35, 80),      S(30, 155),     S(1, 181),      S(-7, 241),     S(-26, 222),    S(-35, 160),    S(-3, 76),      S(-6, 34),      //
    S(9, 101),      S(41, 61),      S(17, 128),     S(-8, 169),     S(-21, 157),    S(-23, 123),    S(-13, 49),     S(-7, 0),       //
    S(25, -71),     S(42, -17),     S(48, 43),      S(-6, 73),      S(7, 26),       S(10, 31),      S(20, -34),     S(0, -29),      //
    S(12, -176),    S(42, -278),    S(32, -141),    S(49, -69),     S(22, -49),     S(40, -121),    S(14, -58),     S(1, -59),      //
    S(-37, -108),   S(25, -360),    S(20, -343),    S(55, -256),    S(58, -171),    S(61, -217),    S(42, -177),    S(-16, -93),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-111, -392),  S(122, -25),    S(-42, 27),     S(-143, 49),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(217, -116),   S(37, 159),     S(48, 149),     S(153, 80),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-13, 54),     S(99, 145),     S(137, 117),    S(115, 74),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-236, 76),    S(54, 102),     S(44, 103),     S(-14, 90),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-211, 35),    S(-24, 75),     S(-9, 82),      S(-92, 119),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-119, 5),     S(73, 20),      S(-15, 71),     S(-61, 100),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(104, -84),    S(156, -23),    S(66, 24),      S(-15, 69),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-16, -122),   S(120, -105),   S(22, -68),     S(7, -67),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// Epoch duration: 38.9337s
// Loss: 0.00246796
// clang-format on
}
