#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(281, 526);
inline const PScore KNIGHT_MAT = S(844, 1001);
inline const PScore BISHOP_MAT = S(862, 1102);
inline const PScore ROOK_MAT   = S(1272, 1798);
inline const PScore QUEEN_MAT  = S(2771, 3282);
inline const PScore TEMPO_VAL  = S(29, 14);

inline const PScore BISHOP_PAIR_VAL  = S(58, 205);
inline const PScore DOUBLED_PAWN_VAL = S(-78, -122);

inline const PScore POTENTIAL_CHECKER_VAL = S(-74, -3);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(-6, -16), S(11, 4), S(74, 53), S(198, 117), S(321, 722), S(1246, 1399),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-240, -230), S(-146, -137), S(-98, -39), S(-53, -2), S(-7, 17), S(13, 66), S(43, 70), S(76, 65), S(123, -9),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-184, -272), S(-125, -190), S(-70, -141), S(-49, -79), S(-9, -41), S(8, -17), S(34, -13), S(44, -3), S(50, 17), S(47, 10), S(65, 8), S(164, -63), S(183, -102), S(270, -150),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-265, -398), S(-100, -95), S(-59, -33), S(-44, -23), S(-24, -3), S(-13, 6), S(5, 24), S(35, 15), S(64, 20), S(86, 35), S(114, 26), S(126, 35), S(173, 22), S(132, 40), S(236, -60),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-32, 51), S(-509, 298), S(-187, -463), S(-171, -133), S(-103, -358), S(-102, -244), S(-131, -39), S(-103, -60), S(-93, -37), S(-84, -4), S(-88, 39), S(-82, 69), S(-54, 52), S(-46, 54), S(-26, 39), S(-30, 61), S(-39, 88), S(-27, 61), S(-9, 30), S(24, -14), S(70, -71), S(133, -147), S(135, -139), S(417, -449), S(332, -427), S(1003, -753), S(721, -568), S(1715, -1242),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(89, -52), S(154, -98),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(32, -11), S(130, -45),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(73, -66), S(112, -99), S(149, -79), S(197, -131),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-57, 49), S(-56, 38), S(17, -29), S(198, -127), S(317, -197),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-172, 463),   S(7, 430),      S(60, 467),     S(281, 190),    S(232, 208),    S(250, 326),    S(117, 342),    S(183, 337),    //
    S(-60, 108),    S(125, 147),    S(85, 52),      S(187, -25),    S(125, -33),    S(30, 37),      S(-37, 97),     S(-89, 48),     //
    S(-76, -62),    S(-51, -60),    S(-42, -114),   S(-37, -149),   S(-38, -133),   S(-94, -132),   S(-117, -68),   S(-157, -39),   //
    S(-65, -168),   S(-28, -130),   S(-63, -174),   S(-72, -166),   S(-81, -179),   S(-118, -170),  S(-145, -100),  S(-181, -110),  //
    S(-24, -193),   S(55, -176),    S(-20, -147),   S(-78, -128),   S(-76, -151),   S(-129, -154),  S(-123, -118),  S(-174, -131),  //
    S(-50, -191),   S(126, -181),   S(28, -147),    S(-64, -102),   S(-88, -153),   S(-121, -142),  S(-124, -96),   S(-173, -118),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-289, -159),  S(-30, -71),    S(-528, 285),   S(-20, 84),     S(-234, 150),   S(-328, 195),   S(-219, -66),   S(-389, 21),    //
    S(79, -56),     S(49, 104),     S(214, -27),    S(22, 76),      S(95, 93),      S(134, -39),    S(-1, -3),      S(64, -63),     //
    S(-9, 81),      S(16, 143),     S(180, 103),    S(142, 75),     S(127, 89),     S(24, 79),      S(20, 80),      S(-81, 58),     //
    S(100, 37),     S(1, 114),      S(54, 120),     S(36, 126),     S(51, 111),     S(53, 82),      S(-24, 50),     S(-4, 71),      //
    S(62, 42),      S(72, 58),      S(62, 54),      S(16, 72),      S(14, 83),      S(24, 78),      S(-26, 70),     S(2, -33),      //
    S(-26, 5),      S(7, -25),      S(-13, -32),    S(15, 39),      S(26, 36),      S(-71, 12),     S(-50, -9),     S(-84, -14),    //
    S(41, 24),      S(9, 14),       S(-49, 6),      S(-30, 22),     S(-35, -1),     S(-73, -12),    S(-46, -37),    S(-100, -114),  //
    S(-95, 57),     S(-5, -40),     S(18, -70),     S(41, -37),     S(46, -40),     S(-24, -128),   S(-60, -19),    S(-204, 0),     //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-153, 88),    S(-47, 18),     S(-552, 116),   S(-306, 113),   S(-322, 130),   S(-494, 132),   S(-60, 105),    S(17, 57),      //
    S(-26, -27),    S(-25, 86),     S(25, 42),      S(30, -5),      S(-4, 48),      S(-2, 53),      S(21, 27),      S(-86, 31),     //
    S(-11, 74),     S(17, 77),      S(239, 43),     S(105, 37),     S(67, 49),      S(5, 80),       S(118, 9),      S(8, 54),       //
    S(18, -7),      S(21, 45),      S(78, 36),      S(89, 66),      S(118, 43),     S(36, 59),      S(21, 50),      S(-71, 83),     //
    S(39, -48),     S(12, 22),      S(38, 11),      S(53, 51),      S(43, 83),      S(-1, 51),      S(-4, 4),       S(-13, -44),    //
    S(51, -11),     S(85, -26),     S(84, -23),     S(2, 45),       S(-4, 53),      S(-19, 68),     S(53, -22),     S(27, -50),     //
    S(2, -54),      S(90, -50),     S(24, -23),     S(0, 3),        S(-11, -13),    S(27, -22),     S(-10, -7),     S(37, -107),    //
    S(0, 52),       S(-15, 23),     S(-19, 33),     S(-3, -40),     S(-26, -37),    S(8, -5),       S(30, -82),     S(-57, 36),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(77, 23),      S(303, -4),     S(11, 94),      S(76, 62),      S(83, 56),      S(28, 70),      S(75, 46),      S(65, 63),      //
    S(134, 33),     S(132, 62),     S(230, 33),     S(104, 106),    S(128, 87),     S(34, 117),     S(-15, 118),    S(21, 104),     //
    S(-23, 90),     S(260, 0),      S(190, 32),     S(183, 30),     S(113, 34),     S(21, 104),     S(62, 70),      S(-46, 90),     //
    S(-33, 76),     S(-11, 68),     S(44, 51),      S(102, -5),     S(62, 15),      S(7, 100),      S(-8, 68),      S(-103, 86),    //
    S(-111, -18),   S(26, -36),     S(-60, 41),     S(-40, 24),     S(-63, 29),     S(-89, 79),     S(-127, 65),    S(-136, 60),    //
    S(-98, -48),    S(8, -113),     S(-60, -28),    S(-78, -17),    S(-48, -42),    S(-129, 33),    S(-142, 18),    S(-156, 13),    //
    S(-146, 13),    S(-92, -73),    S(-61, -57),    S(-49, -48),    S(-55, -37),    S(-76, -20),    S(-132, -36),   S(-143, -48),   //
    S(-125, -14),   S(-97, 5),      S(-62, -31),    S(-37, -41),    S(-52, -17),    S(-59, -25),    S(-78, -38),    S(-99, -25),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(29, 36),      S(52, 0),       S(-19, 161),    S(-22, 138),    S(8, 86),       S(-73, 179),    S(58, 5),       S(-57, 33),     //
    S(63, 105),     S(-156, 281),   S(-65, 296),    S(-257, 425),   S(-161, 293),   S(-177, 290),   S(-95, 127),    S(-32, 71),     //
    S(-81, 215),    S(27, 192),     S(20, 227),     S(-13, 233),    S(-114, 277),   S(-101, 226),   S(-18, 85),     S(-34, 47),     //
    S(36, 45),      S(11, 155),     S(-20, 147),    S(-57, 252),    S(-47, 223),    S(2, 72),       S(-12, 45),     S(-29, 38),     //
    S(22, 55),      S(63, 25),      S(-6, 159),     S(-30, 152),    S(-68, 191),    S(-39, 115),    S(5, -38),      S(-18, -47),    //
    S(71, -139),    S(38, -11),     S(33, 33),      S(-47, 94),     S(-6, 18),      S(2, -5),       S(17, -58),     S(-12, -13),    //
    S(41, -225),    S(42, -296),    S(19, -151),    S(47, -70),     S(1, -35),      S(36, -142),    S(34, -123),    S(-20, -36),    //
    S(-68, -38),    S(-18, -408),   S(-8, -273),    S(20, -238),    S(47, -142),    S(45, -190),    S(10, -129),    S(-60, -4),     //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(562, -551),   S(376, -114),   S(-539, 227),   S(-494, 196),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(289, -55),    S(-172, 164),   S(-101, 182),   S(45, 136),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-186, 128),   S(28, 127),     S(115, 105),    S(48, 69),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-243, 103),   S(-90, 151),    S(121, 97),     S(25, 81),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-223, 36),    S(-71, 81),     S(32, 74),      S(-104, 128),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-139, -24),   S(57, -15),     S(-37, 47),     S(-93, 96),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(92, -114),    S(136, -81),    S(30, -16),     S(-86, 42),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(37, -208),    S(96, -141),    S(-34, -86),    S(-12, -117),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
